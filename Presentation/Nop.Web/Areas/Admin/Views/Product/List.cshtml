@model ProductSearchModel

<!-- jQuery 라이브러리 추가 -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<!-- DataTables CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css" />

<!-- DataTables JS -->
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>


<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
<!-- Popper.js 라이브러리 추가 -->
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<!-- Bootstrap JS 라이브러리 추가 -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

@using Nop.Core.Domain.Catalog;

@{
    //page title
    ViewBag.PageTitle = T("Admin.Catalog.Products").Text;
    //active menu item (system name)
    NopHtml.SetActiveMenuItemSystemName("Products");
}

@{
    const string hideSearchBlockAttributeName = "ProductListPage.HideSearchBlock";
    var hideSearchBlock = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), hideSearchBlockAttributeName);
}

@if (Model.LicenseCheckModel.BlockPages != true)
{
    <form asp-controller="Product" asp-action="List" method="post">
        <div class="content-header clearfix">
            <h1 class="float-left">
                @T("Admin.Catalog.Products")
            </h1>

            <div class="float-right" style="display: flex; justify-content: space-between;">

                @if (User.Identity.Name == "admin@shipgo.biz")
                {
                    <a asp-action="ApiCreate" class="btn btn-primary">
                        <i class="fas fa-plus-square"></i>
                        API
                    </a>
                }

                <div class="float-right">
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus-square"></i>
                        @T("Admin.Common.AddNew")
                    </a>
                    <button asp-action="DownloadCatalogPDF" type="submit" name="download-catalog-pdf" class="btn bg-purple">
                        <i class="far fa-file-pdf"></i>
                        @T("Admin.Catalog.Products.List.DownloadPDF")
                    </button>
                    <div class="btn-group">
                        <button type="button" class="btn btn-success">
                            <i class="fas fa-download"></i>
                            @T("Admin.Common.Export")
                        </button>
                        <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                            <span class="caret"></span>
                            <span class="sr-only">&nbsp;</span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li class="dropdown-item">
                                <button asp-action="ExportToXml" type="submit" name="exportxml-all">
                                    <i class="far fa-file-code"></i>
                                    @T("Admin.Common.ExportToXml.All")
                                </button>
                            </li>
                            <li class="dropdown-item">
                                <button type="button" id="exportxml-selected">
                                    <i class="far fa-file-code"></i>
                                    @T("Admin.Common.ExportToXml.Selected")
                                </button>
                            </li>
                            <li class="dropdown-divider"></li>
                            <li class="dropdown-item">
                                <button asp-action="ExportToExcel" type="submit" name="exportexcel-all">
                                    <i class="far fa-file-excel"></i>
                                    @T("Admin.Common.ExportToExcel.All")
                                </button>
                            </li>
                            <li class="dropdown-item">
                                <button type="button" id="exportexcel-selected">
                                    <i class="far fa-file-excel"></i>
                                    @T("Admin.Common.ExportToExcel.Selected")
                                </button>
                            </li>
                        </ul> <!-- closing ul -->
                    </div> <!-- closing div for btn-group -->
                    @if (!Model.IsLoggedInAsVendor || Model.AllowVendorsToImportProducts)
                    {
                        //a vendor cannot import products
                        <button type="button" name="importexcel" class="btn bg-olive" data-toggle="modal" data-target="#importexcel-window">
                            <i class="fas fa-upload"></i>
                            @T("Admin.Common.Import")
                        </button>
                    }
                    <button type="button" id="delete-selected" class="btn btn-danger">
                        <i class="far fa-trash-alt"></i>
                        @T("Admin.Common.Delete.Selected")
                    </button>
                    <nop-action-confirmation asp-button-id="delete-selected" />
                    @await Component.InvokeAsync(typeof(AdminWidgetViewComponent), new { widgetZone = AdminWidgetZones.ProductListButtons, additionalData = Model })
                </div> <!-- closing div for right floating div -->
            </div> <!-- closing div for outermost right floating div -->
        </div> <!-- closing div for content-header -->

        <section class="content">
            <div class="container-fluid">
                <div class="form-horizontal">
                    <div class="cards-group">
                        <div class="card card-default card-category">
                            <div class="card-body">
                                <div class="row category-row">
                                    <!-- 여기에 카테고리를 추가합니다 -->
                                </div>
                            </div>
                        </div>
                        <script>
                            function buildCategoryNavigation(data, container) {
                                data.forEach(function (category) {
                                    var categoryItem = $('<div class="category-item"></div>');
                                    categoryItem.text(category.Name);
                                    container.append(categoryItem);

                                    if (category.SubCategories && category.SubCategories.length > 0) {
                                        var subCategoryContainer = $('<div class="sub-category-container"></div>');
                                        buildCategoryNavigation(category.SubCategories, subCategoryContainer);
                                        categoryItem.append(subCategoryContainer);
                                    }
                                });
                            }

                            function fetchCategories() {
                                $.ajax({
                                    cache: false,
                                    type: "GET",
                                    url: "@(Url.Action("GetCategories", "Product"))",
                                    dataType: "json",
                                    success: function (data) {
                                        alert("카테고리 데이터를 성공적으로 가져왔습니다!");

                                        if (data && data.length > 0) {
                                            var categoryRow = $(".category-row");
                                            buildCategoryNavigation(data, categoryRow);
                                        }
                                    },
                                    error: function (jqXHR, textStatus, errorThrown) {
                                        alert("카테고리 데이터를 가져오는 데 실패했습니다: ", errorThrown);
                                        console.error("카테고리 데이터를 가져오는 데 실패했습니다: ", errorThrown);
                                    }
                                });
                            }

                            $(document).ready(function () {
                                fetchCategories();
                            });
                        </script>

                        <div class="card card-default card-search">
                            <div class="card-body">
                                <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                                    <div class="search-text">@T("Admin.Common.Search")</div>
                                    <div class="icon-search"><i class="fas fa-search" aria-hidden="true"></i></div>
                                    <div class="icon-collapse"><i class="far fa-angle-@(!hideSearchBlock ? "up" : "down")" aria-hidden="true"></i></div>
                                </div>

                                <div class="search-body @(hideSearchBlock ? "closed" : "")">
                                    <div class="row">
                                        <div class="col-md-5">
                                            <div class="form-group row">
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchProductName" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-editor asp-for="SearchProductName" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableCategories.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchCategoryId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchCategoryId" asp-items="Model.AvailableCategories" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableCategories.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchIncludeSubCategories" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-editor asp-for="SearchIncludeSubCategories" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableManufacturers.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchManufacturerId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchManufacturerId" asp-items="Model.AvailableManufacturers" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableVendors.SelectionIsNotPossible() || Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchVendorId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchVendorId" asp-items="Model.AvailableVendors" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-7">
                                            <div class="form-group row" @(Model.HideStoresList ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchStoreId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchStoreId" asp-items="Model.AvailableStores" />
                                                </div>
                                            </div>
                                            <div class="form-group row" @(Model.AvailableWarehouses.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchWarehouseId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchWarehouseId" asp-items="Model.AvailableWarehouses" />
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchProductTypeId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchProductTypeId" asp-items="Model.AvailableProductTypes" />
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <div class="col-md-4">
                                                    <nop-label asp-for="SearchPublishedId" />
                                                </div>
                                                <div class="col-md-8">
                                                    <nop-select asp-for="SearchPublishedId" asp-items="Model.AvailablePublishedOptions" />
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <div class="col-md-4">
                                                    <nop-label asp-for="GoDirectlyToSku" />
                                                </div>
                                                <div class="col-md-8">
                                                    <div class="input-group input-group-short">
                                                        <nop-editor asp-for="GoDirectlyToSku" />
                                                        <span class="input-group-append">
                                                            <button type="submit" id="go-to-product-by-sku" name="go-to-product-by-sku" class="btn btn-info btn-flat">
                                                                @T("Admin.Common.Go")
                                                            </button>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="text-center col-12">
                                            <button type="button" id="search-products" class="btn btn-primary btn-search">
                                                <i class="fas fa-search"></i>
                                                @T("Admin.Common.Search")
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card card-default">
                            <div class="card-body">
                                <nop-doc-reference asp-string-resource="@T("Admin.Documentation.Reference.Products", Docs.Products + Utm.OnAdmin)" />

                                @await Html.PartialAsync("Table", new DataTablesModel
                            {
                            Name = "products-grid",
                            UrlRead = new DataUrl("ProductList", "Product", null),
                            SearchButtonId = "search-products",
                            Length = Model.PageSize,
                            LengthMenu = Model.AvailablePageSizes,
                            Filters = new List<FilterParameter>
                            {
                            new FilterParameter(nameof(Model.SearchProductName)),
                            new FilterParameter(nameof(Model.SearchCategoryId)),
                            new FilterParameter(nameof(Model.SearchIncludeSubCategories), typeof(bool)),
                            new FilterParameter(nameof(Model.SearchManufacturerId)),
                            new FilterParameter(nameof(Model.SearchStoreId)),
                            new FilterParameter(nameof(Model.SearchWarehouseId)),
                            new FilterParameter(nameof(Model.SearchVendorId)),
                            new FilterParameter(nameof(Model.SearchProductTypeId)),
                            new FilterParameter(nameof(Model.SearchPublishedId))
                            },
                            ColumnCollection = new List<ColumnProperty>
                            {
                            new ColumnProperty(nameof(ProductModel.Id))
                            {
                            IsMasterCheckBox = true,
                            Render = new RenderCheckBox("checkbox_products"),
                            ClassName =  NopColumnClassDefaults.CenterAll,
                            Width = "50"
                            },
                            new ColumnProperty(nameof(ProductModel.PictureThumbnailUrl))
                            {
                            Title = T("Admin.Catalog.Products.Fields.PictureThumbnailUrl").Text,
                            Width = "100",
                            Render = new RenderPicture(width: 100)
                            },
                            new ColumnProperty(nameof(ProductModel.Name))
                            {
                            Title = T("Admin.Catalog.Products.Fields.Name").Text
                            },
                            new ColumnProperty(nameof(ProductModel.Sku))
                            {
                            Title = T("Admin.Catalog.Products.Fields.Sku").Text,
                            Width = "100"
                            },
                            new ColumnProperty(nameof(ProductModel.Price))
                            {
                            Title = T("Admin.Catalog.Products.Fields.Price").Text,
                            Render = new RenderCustom("renderColumnPrice")
                            },
                            new ColumnProperty(nameof(ProductModel.StockQuantityStr))
                            {
                            Title = T("Admin.Catalog.Products.Fields.StockQuantity").Text
                            },
                            new ColumnProperty(nameof(ProductModel.Published))
                            {
                            Title = T("Admin.Catalog.Products.Fields.Published").Text,
                            Width = "80",
                            ClassName = NopColumnClassDefaults.CenterAll,
                            Render = new RenderBoolean()
                            },
                            new ColumnProperty(nameof(ProductModel.Id))
                            {
                            Title = T("Admin.Common.Edit").Text,
                            Width = "80",
                            ClassName =  NopColumnClassDefaults.Button,
                            Render = new RenderButtonEdit(new DataUrl("Edit"))
                            }
                            }
                            })

                                <script>
                                    function renderColumnPrice(data, type, row, meta) {
                                        return (row.ProductTypeId != @((int)ProductType.GroupedProduct) ) ? data : null;
                                    }

                                    $(document).ready(function () {
                                        $('#delete-selected-action-confirmation-submit-button').bind('click', function () {
                                            var postData = {
                                                selectedIds: selectedIds
                                            };
                                            addAntiForgeryToken(postData);
                                            $.ajax({
                                                cache: false,
                                                type: "POST",
                                                url: "@(Url.Action("DeleteSelected", "Product"))",
                                                data: postData,
                                                error: function (jqXHR, textStatus, errorThrown) {
                                                    showAlert('deleteSelectedFailed', errorThrown);
                                                },
                                                complete: function (jqXHR, textStatus) {
                                                    if (jqXHR.status === 204) {
                                                        showAlert('nothingSelectedAlert', '@T("Admin.Common.Alert.NothingSelected")');
                                                        return;
                                                    }
                                                    updateTable('#products-grid');
                                                }
                                            });
                                            $('#delete-selected-action-confirmation').modal('toggle');
                                            return false;
                                        });
                                    });

                                </script>
                                <nop-alert asp-alert-id="deleteSelectedFailed" />
                                <nop-alert asp-alert-id="nothingSelectedAlert" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <script>
            $(document).ready(function () {
                $("#@Html.IdFor(model => model.GoDirectlyToSku)").keydown(function (event) {
                    if (event.keyCode === 13) {
                        $("#go-to-product-by-sku").click();
                        return false;
                    }
                });

                $('select[name="products-grid_length"]').val('20').change();
            });
        </script>
    </form>

    <script>
        $(document).ready(function () {
            // 1. 각 검색 필드의 변경 사항을 감지하여 쿠키에 값을 저장

            // 제품 이름 저장
            $("#SearchProductName").on("change", function () {
                var searchProductName = $(this).val();
                document.cookie = "SearchProductName=" + searchProductName + ";path=/";
            });

            // 카테고리 ID 저장
            $("#SearchCategoryId").on("change", function () {
                var searchCategoryId = $(this).val();
                document.cookie = "SearchCategoryId=" + searchCategoryId + ";path=/";
            });

            // 제조업체 ID 저장
            $("#SearchManufacturerId").on("change", function () {
                var searchManufacturerId = $(this).val();
                document.cookie = "SearchManufacturerId=" + searchManufacturerId + ";path=/";
            });

            // 공급업체 ID 저장
            $("#SearchVendorId").on("change", function () {
                var searchVendorId = $(this).val();
                document.cookie = "SearchVendorId=" + searchVendorId + ";path=/";
            });

            // 상점 ID 저장
            $("#SearchStoreId").on("change", function () {
                var searchStoreId = $(this).val();
                document.cookie = "SearchStoreId=" + searchStoreId + ";path=/";
            });

            // 창고 ID 저장
            $("#SearchWarehouseId").on("change", function () {
                var searchWarehouseId = $(this).val();
                document.cookie = "SearchWarehouseId=" + searchWarehouseId + ";path=/";
            });

            // 제품 유형 ID 저장
            $("#SearchProductTypeId").on("change", function () {
                var searchProductTypeId = $(this).val();
                document.cookie = "SearchProductTypeId=" + searchProductTypeId + ";path=/";
            });

            // 게시 상태 저장
            $("#SearchPublishedId").on("change", function () {
                var searchPublishedId = $(this).val();
                document.cookie = "SearchPublishedId=" + searchPublishedId + ";path=/";
            });

            // SKU로 직접 이동 저장
            $("#GoDirectlyToSku").on("change", function () {
                var goToProductBySku = $(this).val();
                document.cookie = "GoDirectlyToSku=" + goToProductBySku + ";path=/";
            });

            // 2. 페이지가 로드될 때 쿠키에서 해당 값을 가져와 필드에 설정

            // 제품 이름 설정
            var storedSearchProductName = getCookie("SearchProductName");
            if (storedSearchProductName) {
                $("#SearchProductName").val(storedSearchProductName);
            }

            // 카테고리 ID 설정
            var storedSearchCategoryId = getCookie("SearchCategoryId");
            if (storedSearchCategoryId) {
                $("#SearchCategoryId").val(storedSearchCategoryId);
            }

            // 제조업체 ID 설정
            var storedSearchManufacturerId = getCookie("SearchManufacturerId");
            if (storedSearchManufacturerId) {
                $("#SearchManufacturerId").val(storedSearchManufacturerId);
            }

            // 공급업체 ID 설정
            var storedSearchVendorId = getCookie("SearchVendorId");
            if (storedSearchVendorId) {
                $("#SearchVendorId").val(storedSearchVendorId);
            }

            // 상점 ID 설정
            var storedSearchStoreId = getCookie("SearchStoreId");
            if (storedSearchStoreId) {
                $("#SearchStoreId").val(storedSearchStoreId);
            }

            // 창고 ID 설정
            var storedSearchWarehouseId = getCookie("SearchWarehouseId");
            if (storedSearchWarehouseId) {
                $("#SearchWarehouseId").val(storedSearchWarehouseId);
            }

            // 제품 유형 ID 설정
            var storedSearchProductTypeId = getCookie("SearchProductTypeId");
            if (storedSearchProductTypeId) {
                $("#SearchProductTypeId").val(storedSearchProductTypeId);
            }

            // 게시 상태 설정
            var storedSearchPublishedId = getCookie("SearchPublishedId");
            if (storedSearchPublishedId) {
                $("#SearchPublishedId").val(storedSearchPublishedId);
            }

            // SKU로 직접 이동 설정
            var storedGoDirectlyToSku = getCookie("GoDirectlyToSku");
            if (storedGoDirectlyToSku) {
                $("#GoDirectlyToSku").val(storedGoDirectlyToSku);
            }

            // 3. 기존의 DataTable 쿠키 설정 코드
            var defaultPageLength = parseInt(getCookie('dataTablePageLength')) || 10;

            var table;
            if (!$.fn.dataTable.isDataTable('#products-grid')) {
                table = $('#products-grid').DataTable({
                    pageLength: defaultPageLength,
                    retrieve: true
                });
            } else {
                table = $('#products-grid').DataTable();
            }

            table.page.len(defaultPageLength).draw();

            // 페이지 크기가 변경될 때 설정 저장하기
            $('#products-grid').on('length.dt', function (e, settings, len) {
                document.cookie = "dataTablePageLength=" + len + ";path=/";
            });
        });

        // 쿠키 값을 가져오는 함수
        function getCookie(name) {
            var value = "; " + document.cookie;
            var parts = value.split("; " + name + "=");
            if (parts.length == 2) return parts.pop().split(";").shift();
        }
    </script>
}

<div id="license-window" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @Html.Raw(Model.LicenseCheckModel?.WarningText)
        </div>
    </div>
</div>

@*import products form*@
<div id="importexcel-window" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="importexcel-window-title">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="importexcel-window-title">@T("Admin.Common.ImportFromExcel")</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <form asp-controller="Product" asp-action="ImportExcel" method="post" enctype="multipart/form-data">
                <div class="form-horizontal">
                    <div class="modal-body">
                        <ul class="common-list">
                            <li>
                                <em>@T("Admin.Catalog.Products.List.ImportFromExcelTip")</em>
                            </li>
                            <li>
                                <em>@T("Admin.Common.ImportFromExcel.ManyRecordsWarning")</em>
                            </li>
                        </ul>
                        <div class="form-group row">
                            <div class="col-md-2">
                                <div class="label-wrapper">
                                    <label class="col-form-label">
                                        @T("Admin.Common.ExcelFile")
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-10">
                                <input type="file" id="importexcelfile" name="importexcelfile" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            @T("Admin.Common.ImportFromExcel")
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Product" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#exportXmlSelected-info').text("@T("Admin.Products.NoProducts")");
                $("#exportXmlSelected").click();
            }
            else {
                $('#export-xml-selected-form #selectedIds').val(ids);
                $('#export-xml-selected-form').submit();
                updateTable('#products-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportXmlSelected" />

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Product" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#exportExcelSelected-info').text("@T("Admin.Products.NoProducts")");
                $("#exportExcelSelected").click();
            }
            else {
                $('#export-excel-selected-form #selectedIds').val(ids);
                $('#export-excel-selected-form').submit();
                updateTable('#products-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportExcelSelected" />